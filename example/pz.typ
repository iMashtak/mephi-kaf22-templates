#import "../lib.typ": *

#show: nir-pz.with(
  theme: [Применение Typst для оформления студенческих отчётностных работ на 22-й кафедре МИФИ],
  author: "Маштак И.А.",
  group: "Х25-504",
  teacher: "",
  consultant: "",
  spec: "09.04.04 Программная инженерия",
  year: "2025",
  bib: "example/bib.bib",
  task: [
    #include "task.typ"
  ],
  abstract: [
    Пояснительная записка содержит:
    - #pages-count-total() страниц (без учёта приложений --- #pages-count-without-appendix()),
    - #images-count() рисунков,
    - #tables-count() таблиц,
    - #listings-count() листингов,
    - #bib-count() источников литературы.

    Ключевые слова: typst, шаблон, пояснительная записка, задание.

    Целью работы является описание возможности использования Typst для написания пояснительных записок, расширенных содержаний пояснительных записок, заданий на научно-исследовательскую работу, домашних заданий и лабораторных на 22-й кафедре МИФИ.

    В разделе 1 производится анализ различных инструментов для составления документов, в том числе Typst. Рассматриваются преимущества и недостатки каждого из инструментов.

    В разделе 2 приводится краткая выжимка из документации ценность которой состоит лишь в том, что она записана на русском языке. К сожалению, целью данного раздела не ставится полный перевод всей документации на русский язык, поэтому приводятся лишь конструкции, которые могут быть использованы при написании пояснительных записок.

    В разделе 3 рассматриваются реализованные шаблоны заданий и пояснительных записок. Описываются важные функции, которые стоит использовать при написании пояснительной записки. К счастью, можно также использовать исходник этого документа, ведь он составлен в стиле пояснительной записки.
  ],
  intro: [
    На 22-й кафедре студенты пишут свои работы в Word или LaTeX. Безусловно, каждый из инструментов чем-то удобен, либо не удобен, однако с течением времени всё меняется, приходят новые инструменты, более совершенные, чем прежние.

    - Word удобен для быстрой разработки документа, но до тех пор, пока не возникают проблемы с единообразием форматирования. Каждый шаблонный элемент --- такой как рисунок или листинг, требует отдельных усилий по форматированию. Также большим недостатком Word является отсутствие автоматического составления и форматирования списка литературы, сложности с вводом и нумерацией формул.
    - LaTeX предоставляет весьма мощную систему для написания текстов, предоставляет макросы-шаблоны для поддержания единообразия форматирования. Однако синтаксис LaTeX-а очень сложен как для записи, так и для чтения. Особенно это касается подготовки тех самых макросов-шаблонов. Открыть исходник библиотеки и прочитать код невероятно сложно. Также нетривиальной вещью является установка и непосредственное использование LaTeX --- он выставляет очень высокий порог входа по сравнению с другими инструментами.

    Здесь и появляется Typst. Он сохраняет всю функциональную мощь LaTeX, но предоставляет Markdown-подобный синтаксис для основных элементов текста, таких как абзацы, заголовки, рисунки, листинги. Сам Typst предоставляет императивный язык стилизации и скриптинга, в рамках которого можно производить произвольные вычисления и самостоятельно осуществлять процедуры рендера элементов текста.

    Целью работы является описание возможности использования Typst для написания пояснительных записок, расширенных содержаний пояснительных записок, заданий на научно-исследовательскую работу, домашних заданий и лабораторных на 22-й кафедре МИФИ.

    В разделе 1 производится анализ различных инструментов для составления документов, в том числе Typst. Рассматриваются преимущества и недостатки каждого из инструментов.

    В разделе 2 приводится краткая выжимка из документации ценность которой состоит лишь в том, что она записана на русском языке. К сожалению, целью данного раздела не ставится полный перевод всей документации на русский язык, поэтому приводятся лишь конструкции, которые могут быть использованы при написании пояснительных записок.

    В разделе 3 рассматриваются реализованные шаблоны заданий и пояснительных записок. Описываются важные функции, которые стоит использовать при написании пояснительной записки. К счастью, можно также использовать исходник этого документа, ведь он составлен в стиле пояснительной записки.

    Также в документе есть два приложения, которые не несут в себе смысла, но оставлены в демонстрационных целях.
  ],
  conclusion: [
    Надеюсь, данный текст поспособствует достижению цели по внедрению Typst в процесс написания отчётностных документов на кафедре. Выражая личную оценку, это превосходный инструмент, предоставляющий намного более ясный понятийный аппарат, чем LaTeX, и более удобный синтаксис. В будущем команда Typst планирует (на самом деле, уже частично разработала) рендер в HTML, что увеличит универсальность данного инструмента. Также на Typst, как и на LaTeX, можно делать презентации, но этот аспект умышленно не обозначен в данном документе, так как нет на то запроса.
  ],
  appendices: [
    = Приложение первое

    #lorem(100)

    = Приложение второе

    #lorem(100)
  ],
)

= Анализ инструментов для написания документов

Предложение использования Typst предполагает анализ и сравнительное исследование различных инструментов написания текстов, выявление преимуществ и недостатков. В этом разделе проводится обзор множества различных технологий, касающихся создания документов.

== Microsoft Word

Word --- отличная технология, пока дело не доходит до сложным образом форматируемых документах, чем и является пояснительная записка к научно-исследовательской работе.

Каждый элемент текста может быть отформатирован своим образом, что провоцирует нарушать общий стиль форматирования документа в целом. Да, можно задать некоторые настройки глобально --- по типу размера отступов на странице или междустрочного интервала. Однако настраивать отображение подписей рисунков, таблиц и листингов придётся каждый раз самостоятельно. 

Другой проблемой является набор формул --- Word избрал визуальный подход и в этом случае, и хоть в новых версиях LaTeX-комбинации автоматически преобразуются в символы (например, если будешь вводить `\sum`, то Word в конце ввода этой комбинации символов заменит этот текст на символ $sum$), поддерживается лишь некоторый набор спецсимволов, а сложные формулы вводить всё равно придётся натыкивая элементы из панели кнопками.

Отдельной головной болью является возможность вставлять гиперссылки на элементы документа и осуществлять цитирования источников. Средства автоматической генерации списка литературы весьма ограничены, хоть и существуют. Ограничения в основном связаны с тем, чтобы организовывать список упорядоченным по последовательности цитирования в тексте. Генерация оглавления присутствует, но частой проблемой является "слетание" стилей на оглавлении при добавлении нового раздела.

Также ввиду того, что `.docx` --- это не текстовый файл, а ZIP-архив, использовать системы контроля версий для совместной с руководителем разработки задания или текста пояснительной записки становится весьма проблематично.

Все вышеуказанные проблемы приводят к выводу, что существует способ их решения. Подход WYSIWYG (what you see is what you get) удобен для чтения, но крайне неудобен для записи. Пояснительная записка же студентом большую часть времени именно пишется, а настроить красивое отображение --- дело техники.

== LaTeX

Полным избавлением от обозначенных выше проблем выступает LaTeX. Code First инструмент, позволяющий записывать документ в обычных текстовых файлах и на основе них генерировать PDF-документ. Документы получаются очень красивые.

Основной проблемой LaTeX является порог входа --- инструмент очень старый и требует нетривиальных настроек даже в плане шрифтов и использования русского языка. Эти проблемы ложатся скорее на плечи разработчика шаблонов документов. К сожалению, LaTeX-документы очень сложно читать. Обилие `\command` команд, которые каким-то специальным образом форматируют итоговый результат, возможность многими способами достичь одного результата не способствуют облегчению понимания текста на LaTeX.

Другим недостатком LaTeX является очень долгий цикл обратной связи. Под этим подразумевается промежуток времени от того, когда пользователь вводит символ до отображения его в "preview"-окне. В LaTeX в принципе отсутствует понятие "preview" --- необходимо полностью скомпилировать документ. Компиляция для документов размера пояснительной записки к НИР (больше 50 страниц) занимает значительное время.

Безусловно, написать пояснительную записку на LaTeX можно, но "ценой чего?". Потенциальный студент, которому предлагают использовать LaTeX сталкивается с необходимостью тратить слишком много времени на изучение инструмента, прежде чем иметь возможность реализовывать с помощью него свои задачи. Поэтому лишь небольшая часть студентов находят время на изучение LaTeX. Возможно, есть варианты лучше.

== Markdown

Markdown не является альтернативой LaTeX, потому что создавался совсем не для этих целей. Однако этот язык разметки очень легко читать. Возможно, это минимальный понятный синтаксис для записи текстов в подходе Code First.

Этот язык очень широко распространён --- на Github, Gitlab, в специальных секциях Jupyter Notebook, буквально везде, где нужно написать структурированный текст. Студентам-программистам так или иначе придётся столкнуться с этим языком и его синтаксическими конструкциями, хоть они и крайне просты.

Но написать пояснительную записку в Markdown невозможно. В базовом синтаксисе просто нет возможности задавать тот уровень форматирования, что требуется.

== Asciidoc

Asciidoc --- более продвинутая альтернатива Markdown. Синтаксис похож, но немного отличается. Также присутствует множество синтаксических конструкций, которых в Markdown нет. Например, возможно автоматически сгенерировать оглавление документа одной командой.

Вероятно, никто не пытался написать пояснительную записку на Asciidoc, но, наверное, это не очень-то и нужно.

== Typst

Typst можно рассматривать как полную замену LaTeX. Фактически, эта технология реализует тот же подход, точно так же компилирует исходные текстовые файлы в PDF-документ. Однако то, каким образом записываются эти исходные файлы имеет значение.

В качестве основы Typst взял, по видимому, Asciidoc. Ввиду этого, основные конструкции языка, такие как абзацы, списки, заголовки, листинги, записываются с минимальным количеством мета-символов. Это удобно для чтения и подсветки синтаксиса в IDE. Конечно, сложные конструкции типа таблиц записываются уже более сложно, но вполне читаемо. Кому-то может даже показаться, что читать Typst-таблицы в исходном тексте удобнее, чем LaTeX. Однако это может быть неверно для маленьких таблиц.

В Typst используется объектно-ориентированный подход с императивным скриптингом. То есть существует объектные сущности разметки, через которые можно управлять стилем и оформлением текста, а есть скриптовый язык, позволяющий делать произвольные вычисления. В этом скриптовом языке есть даже структуры данных --- списки и словари. Это выгодно отличает Typst от LaTeX.

Цикл обратной связи весьма быстрый, отрабатывает не дольше, чем Markdown. Расширение для VSCode предоставляет "preview"-режим, где новый текст появляется мгновенно с вводом. При этом это не настоящий PDF, а именно "preview", которая в то же время показывает, как будет выглядеть документ. Одной из важных фич расширения является возможность кликнуть на отрендеренный элемент (например, на конкретное слово) и перейти к нему в исходном коде.

Недостатком же Typst является его молодость. Некоторые функции, которые можно было бы относительно легко сделать на LaTeX попросту отсутствуют в стандартной библиотеке. Например, список библиографии может быть только один в документе. К счастью, существует библиотека, которая решает этот вопрос, но всё же.

== Выводы

Необходимо более детально рассмотреть Typst как прямую альтернативу LaTeX. Есть высокая вероятность того, что за этой технологией будущее. Хоть и весьма отдалённое ввиду высокой инерции сообщества LaTeX. Многие пользователи LaTeX до последнего будут игнорировать существование Typst, либо даже негативно реагировать на его рекламу. Однако такой молодой технологии невероятно сильно нужна реклама, ведь она того действительно заслуживает.


// ---
= Описание Typst

== Установка и использование

Для полноценного использования Typst необходимо как установить его самого на машину, так и настроить IDE для удобства разработки документов.

Установка подразумевает несколько вариантов:

1. Можно напрямую скачать архив с бинарником со страницы релизов в репозитории Typst на #link("https://github.com/typst/typst/releases")[Github], распаковать и расположить по одному из путей, указанных в `PATH`. Дальнейшие обновления можно получать просто запуская команду `typst update`.
2. Можно использовать пакетные менеджеры:
  - Windows: `winget install --id Typst.Typst`,
  - MacOS: `brew install typst`,
  - Linux Snap: #link("https://snapcraft.io/typst").

3. Можно использовать Docker-контейнер в качестве CLI: `docker run ghcr.io/typst/typst:latest --help`.

Предлагаемым вариантом среды разработки выбран VSCode. Необходимо установить расширение #link("https://open-vsx.org/extension/myriad-dreamin/tinymist/0.13.28")[Tinymist Typst].

== Выводы

Документация Typst доступна по адресу #link("https://typst.app/docs/"). По запросу в этот раздел можно вставить выжимку из англоязычной документации, с переводом на русский язык.


// ---
= Разработка шаблонов для студенческих отчётностных работ

В данном разделе рассматривается практическое применение Typst для разработки шаблонов различных студенческих отчётностных работ. Описываются особенности и способ использования шаблонов.

== Задание на научно-исследовательскую работу

Задание формируется как отдельный Typst-документ. Достаточно импортировать разработанную библиотеку и записать следующее:

#figure(
  caption: [Объявление использования шаблона ПЗ НИР.],
  ```typ
  #show: nir-task.with(
    theme: [
      Применение Typst для оформления
      студенческих отчётностных работ на
      22-й кафедре МИФИ
    ],
    author: "Маштак И.А.",
    group: "Х25-504",
    teacher: "",
    bib: "example/task-bib.bib",
    task-date: datetime(day: 1, month: 9, year: 2099),
  )
  ```,
)


Как видно из листинга выше, используется шаблон `nir-task`, что означает преднастроенный шаблон именно для научно-исследовательской работы. Параметры:

- `theme` --- тема работы,
- `author` --- Фамилия И.О. студента, выполнявшего работу,
- `group` --- группа студента,
- `teacher` --- Фамилия И.О. научного руководителя,
- `bib` --- путь до файла в формате BibTeX со списком литературы, который должен быть прикреплён к заданию; все источники, обозначенные в данном файле будут автоматически помещены в таблицу, поэтому не нужно дополнительно ничего цитировать,
- `task-date` --- дата составления задания; необязательный параметр, можно оставить пустым для того, чтобы вписать соответствующую дату от руки.

Затем необходимо составить список задач по разделам пояснительной записки. Делается это следующим образом:

#figure(
  caption: [Объявление таблицы с задачами.],
  ```typ
  #tasks-table(
    rspz-date: [4.10.2025],
    pz-date: [4.10.2025],
    (...),
    (...),
  )
  ```,
)

Используется функция `tasks-table` с двумя необязательными аргументами `rspz-date` и `pz-date`, значение которых очевидно. Затем необходимо последовательно записать разделы будущей пояснительной записки:

#figure(
  caption: [Объявление разделов задания.],
  ```typ
  #tasks-table(
    ...,
    (
      name: [Аналитическая часть],
      tasks: ((...), (...), (...))
    ),
    (
      name: [Теоретическая часть],
      tasks: ((...), (...), (...))
    ),
    (
      name: [Инженерная часть],
      tasks: ((...), (...), (...))
    ),
    (
      name: [Технологическая и практическая часть],
      tasks: ((...), (...), (...))
    ),
  )
  ```,
)

Как видно, это напоминает синтаксис определения таблиц с тем отличием, что каждый элемент является не контентом, а множеством ключ-значение:

- `name` --- название раздела,
- `tasks` --- список задач; на данный момент есть ограничение на то, что в списке задач раздела обязательно должно быть хотя бы два элемента, чтобы скрипт корректно распознал структуру передаваемых аргументов.

Конкретные задачи записываются следующим образом:

#figure(
  caption: [Объявление самих задач внутри разделов.],
  ```typ
  #tasks-table(
    ...,
    (
      name: [Аналитическая часть],
      tasks: (
        (
          title: [Задача номер 1],
          form: [Аналитический отчёт, разделы ПЗ],
          date: [01.09.2025]
        ),
        (...),
        (...),
      ),
    ),
  )
  ```,
)

Задачи имеют следующие атрибуты:

- `title` --- формулировка задачи,
- `form` --- форма отчётности,
- `date` --- срок, к которому должна быть выполнена задача.

Задачи в результирующей таблице автоматически нумеруются, поэтому дополнительно за этим следить не нужно. Также в первый раздел последним элементом автоматически добавляется пункт про оформление расширенного содержания пояснительной записки, а последний раздел задания всегда содержит требование об оформлении пояснительной записки.

== Пояснительная записка

Для использования шаблона пояснительной записки необходимо записать следующий код:

#figure(
  caption: [Объявление использования шаблона ПЗ НИР],
  ```typ
  #show: nir-pz.with(
    theme: [Применение Typst для оформления
    студенческих отчётностных работ на
    22-й кафедре МИФИ],
    author: "Маштак И.А.",
    group: "Х25-504",
    teacher: "",
    consultant: "",
    spec: "09.04.04 Программная инженерия",
    year: "2025",
    bib: "example/bib.bib",
    task: [
      #include "task.typ"
    ],
    abstract: [
    ],
    intro: [
    ],
    conclusion: [
    ],
    appendices: [
    ],
  )
  ```,
)

Как видно, используется преднастроенный под магистерский НИР шаблон ПЗ со следующими атрибутами:

- `theme` --- тема НИРа,
- `author` --- Фамилия И.О. студента,
- `group` --- группа студента,
- `teacher` --- Фамилия И.О. научного руководителя,
- `consultant` --- Фамилия И.О. научного консультанта,
- `spec` --- полное название специальности вместе с кодом,
- `year` --- год выполнения работы,
- `bib` --- путь до файла в формате BibTeX со списком используемой литературы; в отличие от задания источники из этого файла будут занесены в список литературы только в том случае, если будут процитированы и в том порядке, в котором были процитированы,
- `task` --- секция для описания задания; логичным будет просто импортировать сюда ранее записанное в отдельном файле задание,
- `abstract` --- секция для реферата; также имеет смысл записать реферат в отдельном файле, а здесь лишь импортировать его,
- `intro` --- секция для введения,
- `conclusion` --- секция для заключения,
- `appendices` --- секция для приложений, важно --- всех приложений; именно в этой секции изменяется нумерация заголовков на требуемый для приложений; просто разместите исходники своих приложений в отдельных файлах, а в этой секции импортируйте их.

Первой страницей получившегося документа будет титульный лист пояснительной записки, а также соответствующая всем требованиям последовательность разделов. Основные разделы пояснительной записки (аналитическая часть, теоретическая и т.п.) должны идти обычным текстом после указанного объявления использования шаблона.

Для вставки рисунков, таблиц или листингов необходимо использовать функцию `figure`:

#figure(
  caption: [Вставка рисунка],
  ```typ
  #figure(
    caption: [$lambda$-куб],
    image("lambda-cube.png", width: 50%),
  )
  ```,
)

Итогом выполнения данной команды будет рисунок @lambda-cube.

#figure(
  caption: [$lambda$-куб],
  placement: auto,
  image("lambda-cube.png", width: 50%),
) <lambda-cube>

В шаблоне настроена возможность ссылаться на различные элементы: рисунки, таблицы, листинги, формулы. Для того, чтобы поставить ссылку, необходимо указать метку на самом объекте ссылки, а затем указать эту метку через символ `@`.

#figure(
  caption: [Пример использования ссылок],
  ```typ
  #figure(
    caption: [$lambda$-куб],
    image("lambda-cube.png", width: 50%),
  ) <lambda-cube>

  Ссылка на рисунок @lambda-cube.
  ```,
)

Ссылки на формулы работают аналогично. Например, ссылка на листинг @formula-code, из которого получается формула @formula.

#figure(
  caption: [Пример записи формулы.],
  ```typ
  $
    sum_(i=1)^n i
  $ <formula>
  ```
) <formula-code>

$
  sum_(i=1)^n i
$ <formula>

Наконец, пример использования таблицы указан на листинге @table-usage. Этот код породит таблицу @example-table.

#figure(
  caption: [Объявление таблицы.],
  placement: auto,
  ```typ
  #figure(
    caption: [Пример использования таблицы],
    table(
      columns: (1fr, 1fr, 1fr),
      [Первая ячейка],
      [Вторая ячейка],
      [Третья ячейка],
      table.cell(colspan: 2, [Сдвоенная ячейка]),
      [Последняя ячейка],
    )
  ) <example-table>
  ```,
) <table-usage>

#figure(
  caption: [Пример использования таблицы],
  table(
    columns: (1fr, 1fr, 1fr),
    [Первая ячейка],
    [Вторая ячейка],
    [Третья ячейка],
    table.cell(colspan: 2, [Сдвоенная ячейка]),
    [Последняя ячейка],
  ),
) <example-table>

Элементы библиографии цитируются точно так же через `@`. Например, процитируем "Чистую архитектуру" @Fund:Clean-Architecture.

Важной особенностью функции `figure` является возможность задать месторасположение встраиваемого элемента с помощью атрибута `placement`. Этот атрибут уже использовался выше для того, чтобы на страницах не было "пустых дыр".

== Расширенное содержание пояснительной записки

Расширенное содержание пояснительной записки подразумевает использование шаблона `nir-rspz` или `uir-rspz` для НИРа и УИРа соответственно. Все атрибуты аналогичны шаблону ПЗ. Специального синтаксиса для аннотаций не предусмотрено, однако по запросу возможно сделать функцию, которая бы отображала свой контент только в том случае, если указан признак РСПЗ.

== Лабораторная работа

Для лабораторных работ специфичен лишь титульный лист. По запросу можно таковой сделать.

== Выводы

Разработаны шаблоны ПЗ и РСПЗ вместе с титульными листами и заданием. Настроена ссылочность и форматирование в полном соответствии с методическими рекомендациями. В случае нахождения багов просьба обращаться к автору данного документа.

В целом, шаблоны готовы к использованию.